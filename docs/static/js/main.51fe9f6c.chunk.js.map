{"version":3,"sources":["components/Projects.js","components/bio.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","cardTitle","position","title","color","zIndex","background","padding","borderRadius","textShadow","maxWidth","top","boxShadow","Projects","props","classes","useState","projects","setProjects","useEffect","Fragment","map","project","index","Grid","item","xs","lg","key","Card","elevation","CardActionArea","CardContent","onClick","window","open","url","src","thumb","alt","name","className","href","target","Typography","variant","component","desc","CardActions","stack","tech","style","margin","fontSize","intro","letterSpacing","transition","fontWeight","opacity","social","bio","width","right","textAlign","border","mixBlendMode","Bio","class","rel","projectsContainer","groupUl","Dashboard","data","container","spacing","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.51fe9f6c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Grid from '@material-ui/core/Grid'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\n\nconst useStyles = makeStyles((theme) => ({\n  cardTitle: {\n    position: 'absolute',\n  },\n  title: {\n    color: 'white',\n    position: 'absolute',\n    zIndex: '-1',\n    background: 'linear-gradient(123deg,#3978af 0,#2bbfc3 50%,#2898bb 100%)',\n    padding: '15px 53px 6px 53px ',\n    borderRadius: '15px 15px 0 0',\n    textShadow: '1px 1px 2px rgba(0,0,0,0.22), 2px 2px 4px rgba(0,0,0,0.22)',\n    maxWidth: 380,\n    top: '-60px',\n    boxShadow:\n      '0px 11px 15px -7px rgba(0,0,0,0.2), 0px 24px 38px 3px rgba(0,0,0,0.14), 0px 9px 46px 8px rgba(0,0,0,0.12)',\n  },\n}))\n\nexport default function Projects(props) {\n  const classes = useStyles()\n  const [projects, setProjects] = useState([])\n\n  useEffect(() => {\n    setProjects(props.projects)\n  }, [props])\n\n  return (\n    <React.Fragment>\n      {projects &&\n        projects.map((project, index) => (\n          <Grid item xs={12} lg={4} key={index}>\n            <Card elevation={24}>\n              <CardActionArea>\n                {/* <CardMedia image={project.thumb} title={project.name} /> */}\n                <CardContent onClick={() => window.open(project.url, '_blank')}>\n                  <img src={project.thumb} alt={project.name}></img>\n                  <h4 className={classes.title}>\n                    <a href={project.url} target=\"_new\">\n                      {project.name}\n                    </a>\n                  </h4>\n\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\">\n                    {project.desc}\n                  </Typography>\n                </CardContent>\n              </CardActionArea>\n              <CardActions>\n                {project.stack &&\n                  project.stack.map((tech, index) => (\n                    <span\n                      style={{\n                        background:\n                          'linear-gradient(180deg, rgba(117,211,241,1) 8%, rgba(77,171,201,1) 100%)',\n                        margin: '0 5px  10px',\n                        fontSize: 'small',\n                        borderRadius: 4,\n                        padding: '5px 10px',\n                        boxShadow:\n                          'inset 0 1px 3px rgba(0,0,0,0.12), inset  0 1px 2px rgba(0,0,0,0.24)',\n                      }}\n                      key={index}>\n                      {tech.tech}\n                    </span>\n                  ))}\n              </CardActions>\n            </Card>\n          </Grid>\n        ))}\n    </React.Fragment>\n  )\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport LinkedInIcon from '@material-ui/icons/LinkedIn'\nimport WhatsAppIcon from '@material-ui/icons/WhatsApp'\nimport GitHubIcon from '@material-ui/icons/GitHub'\nimport MailIcon from '@material-ui/icons/Mail'\n\nconst useStyles = makeStyles((theme) => ({\n  intro: {\n    padding: '50px 80px 0',\n    '& h1': {\n      color: '#fff',\n      fontSize: 90,\n      textShadow:\n        '0px 11px 15px  rgba(0,0,0,0.2), 0px 24px 38px  rgba(0,0,0,0.14), 0px 9px 46px  rgba(0,0,0,0.12)',\n      letterSpacing: 2,\n      transition: 'all ease-in-out 0.2s',\n      fontWeight: 100,\n    },\n    '& h2': {\n      color: '#fff',\n      fontSize: 23,\n      letterSpacing: '5px',\n      opacity: '0.5',\n      textShadow: '0 13px 33px rgba(0, 0, 0, .3)',\n    },\n    '& h3': {\n      color: '#fff',\n      fontSize: 34,\n      letterSpacing: '7px',\n    },\n    // '&:hover': {\n    //   '& > h1': {\n    //     color: '#fff',\n    //     fontSize: 90,\n    //     letterSpacing: '25px',\n    //     top: '10%',\n    //     right: '42%',\n    //     zIndex: 1,\n    //   },\n    //   '> bio': {\n    //     opacity: 1,\n    //   },\n    // },\n  },\n  social: {\n    opacity: '0.7',\n  },\n  bio: {\n    position: 'fixed',\n    zIndex: 9999,\n    background: ' linear-gradient(67deg, rgba(2,32,70,1) 0%, transparent 69%)',\n    padding: '90px 90px',\n    width: 'fit-content',\n    opacity: 0.6,\n    right: '-15px',\n    top: '30%',\n    textAlign: 'right',\n    borderRadius: '40px 0 0 40px',\n    border: '15px solid rgba(3,38,75,0.2)',\n    mixBlendMode: 'color-dodge',\n    color: 'rgba(222,232,170,0.6)',\n    boxShadow:\n      '0px 10px 14px -6px rgba(55,155,255,0.12), 0px 22px 35px 3px rgba(25,75,155,0.11), 0px 8px 42px 7px rgba(55,255,255,0.08)',\n  },\n}))\n\nexport default function Bio() {\n  const classes = useStyles()\n  return (\n    <div className={classes.intro}>\n      {/* <Paper className={classes.bio} elevation={22}> */}\n      <h1>Roger Sobrado</h1>\n      <h2>FullStack | UI/UX Developer</h2>\n      <div className={classes.social}>\n        {' '}\n        <a\n          href=\"https://wa.me/50689171474\"\n          class=\"ws\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\">\n          <WhatsAppIcon />\n          {'   '}\n        </a>\n        <a\n          href=\"mailto:roger.sobrado.e@gmail.com\"\n          class=\"gm\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\">\n          <MailIcon />\n          {'   '}\n        </a>\n        <a\n          href=\"https://github.com/rsobrado\"\n          class=\"gh\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\">\n          <GitHubIcon />\n          {'   '}\n        </a>\n        <a\n          href=\"https://www.linkedin.com/in/rsobrado/\"\n          class=\"ln\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\">\n          <LinkedInIcon />\n          {'   '}\n        </a>\n      </div>\n      {/* <p>\n          Full-stack Web and Mobile Developer with 10+ years of experience in\n          the development trackâ€¦ Coding and analyzing graphic elements,\n          enhancing the experience, researching, listening good musicâ€¦\n        </p> */}\n      {/* </Paper> */}\n    </div>\n  )\n}\n","import React, {  useState,useEffect  } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport Grid from '@material-ui/core/Grid'\n\nimport Projects from './Projects'\nimport Bio from './bio'\nimport data from './../data/projects.json'\n\nconst useStyles = makeStyles((theme) => ({\n  \n  projectsContainer: {\n    padding: 100,\n    width: '100%',\n  },\n  groupUl: {\n    padding: 0,\n    margin: 0,\n  },\n}))\n\nexport default function Dashboard() {\n  const classes = useStyles()\n  const [projects, setProjects] = useState(data)\n  useEffect(() => {\n    setProjects(data)\n  }, [])\n\n  return (\n    <div>\n      <Bio />\n      <Grid container spacing={10} className={classes.projectsContainer}>\n        <Projects projects={projects} />\n      </Grid>\n    </div>\n  )\n}\n","import React from 'react'\nimport './App.css'\nimport Dashboard from './components/Dashboard'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"overlay\"></div>\n      <Dashboard />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}